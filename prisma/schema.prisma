generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model SuperUser {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  firstName String
  lastName  String
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Admin {
  id        Int       @id @default(autoincrement())
  email     String    @unique
  firstName String
  lastName  String
  password  String
  websites  Website[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Website {
  id         Int        @id @default(autoincrement())
  name       String     @unique
  url        String     @unique
  services   Service[]
  updatedAt  DateTime   @updatedAt
  createdAt  DateTime   @default(now())
  admin      Admin?     @relation(fields: [adminId], references: [id])
  adminId    Int?
  users      User[]
  products   Product[]
  categories Category[]
  images     Image[]
  address    Address[]
  contact    Contact[]
}

model Service {
  id          Int       @id @default(autoincrement())
  name        String    @unique
  description String
  websites    Website[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  firstName String
  lastName  String
  password  String
  website   Website  @relation(fields: [websiteId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  websiteId Int
}

// ==== E-commerce models ====

model Category {
  id               Int       @id @default(autoincrement())
  name             String
  quantityProducts Int
  slug             String
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  products         Product[]
  Website          Website?  @relation(fields: [websiteId], references: [id])
  websiteId        Int?
}

model Product {
  id          Int      @id @default(autoincrement())
  name        String
  description String
  price       Float
  slug        String   @unique
  images      Image[]
  category    Category @relation(fields: [categoryId], references: [id])
  categoryId  Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  Website     Website? @relation(fields: [websiteId], references: [id])
  websiteId   Int?
}

model Image {
  id        Int      @id @default(autoincrement())
  url       String
  productId Int
  product   Product  @relation(fields: [productId], references: [id])
  filename  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Website   Website? @relation(fields: [websiteId], references: [id])
  websiteId Int?
}

// ==== Portfolio models ====

model Address {
  id        Int      @id @default(autoincrement())
  latitude  Float
  longitude Float
  fullAddress String
  websiteId Int
  website   Website?  @relation(fields: [websiteId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Contact {
  id        Int      @id @default(autoincrement())
  email     String
  office    String
  phone     String
  social_networks String
  link_social_networks String
  websiteId Int
  website   Website?  @relation(fields: [websiteId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
